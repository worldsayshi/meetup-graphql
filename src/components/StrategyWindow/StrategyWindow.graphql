query GameSession($gameSessionGuid: uuid) {
  game_sessions(where:{uuid:{_eq: $gameSessionGuid}}) {
    ...Session
  }
}

query GameLobby {
  game_sessions {
    ...Session
  }
}

subscription GameEvents($game_session_id: Int, $after_game_event_id: Int) {
  game_events(where: {
    id: {_gt: $after_game_event_id},
    game_session_id: {_eq: $game_session_id}}) {
    ...GameEvent
  }
}

mutation submitGameEvent($game_session_id: Int, $type: String, $source_client_id: Int, $trigger_tick: Int, $target_tick: Int, $payload: jsonb) {
  insert_game_events(objects: [{
    game_session_id: $game_session_id,
    type: $type,
    trigger_tick: $trigger_tick,
    target_tick: $target_tick,
    payload: $payload,
    source_client_id: $source_client_id
  }]) {
    returning {
      ...GameEvent
    }
  }
}

mutation submitGameEvents($gameEvents: [game_events_insert_input!]!) {
  insert_game_events(objects: $gameEvents) {
    returning {
      ...GameEvent
    }
  }
}

mutation createGameClient($game_session_id: Int) {
  insert_game_clients(objects:[{
    game_session_id: $game_session_id
  }]) {
    returning {
      ...GameClient
    }
  }
}

mutation SetArmyTarget($armyId: Int, $nodeId: Int) {
  update_armies(
    where: {id: {_eq: $armyId}},
    _set: {planned_node_id: $nodeId}) {
    returning {
      id
      planned_node_id
    }
  }
}

fragment GameClient on game_clients {
  id
	game_session_id
}

fragment GameEvent on game_events {
  id
  game_session_id
  source_client_id
  type
  target_tick
  trigger_tick
  payload
}

fragment Session on game_sessions {
  id
  uuid
	elapsed_ticks
  session_config {
    ...SessionConfig
  }
  nodes {
    ...Node
  }
  edges {
    ...Edge
  }
  armies {
    ...Army
  }
}

fragment SessionConfig on session_configs {
  id
  map_scale
}

fragment Army on armies {
  id
  progress
  planned_path
  planned_node_id
  army_type {
    ...ArmyType
  }
  current_node {
    ...Node
  }
}

fragment ArmyType on army_types {
  id
  speed
}

fragment Node on nodes {
  id
  position
}

fragment Edge on edges {
  id
  from {
    ...Node
  }
  to {
    ...Node
  }
}